
require "raylib.paka"

screen_width = 1920 * 3 / 2
screen_height = 1080 * 3 / 2

size = 32

data = new size

uvcolor = true

colors = [
    [0   , 0   , 0  ],
    [255 , 0   , 0  ],
    [0   , 255 , 0  ],
    [255 , 255 , 0  ],
    [0   , 0   , 255],
    [255 , 0   , 255],
    [0   , 255 , 255],
    [255 , 255 , 255],
]

## def update(t) {
##     max = size - 1
##     x = 1
##     while x < max {
##         y = 1
##         while y < max {
##             z = 1
##             while z < max {
##                 vx0 = data.(x).(y).(z)
##                 vx0 = data.(x-1).(y).(z)
##                 vx1 = data.(x+1).(y).(z)
##                 vy0 = data.(x).(y-1).(z)
##                 vy1 = data.(x).(y+1).(z)
##                 vz0 = data.(x).(y).(z-1)
##                 vz1 = data.(x).(y).(z+1)
                
##                 k = 0
##                 k = k + if vx0 + vx1 != 0 { 1 } else { 0 }
##                 k = k + if vy0 + vy1 != 0 { 2 } else { 0 }
##                 k = k + if vz0 + vz1 != 0 { 4 } else { 0 }
                
##                 if k != 0 {
##                     if data.(x).(y).(z) != 0 {
##                         data.(x).(y).(z) = k
##                     }
##                 }
##                 if vx0 + vx1 + vy0 + vy1 + vz0 + vz1 > 0 {
##                     if GetRandomValue(0, 100) < 1 {
##                         data.(x).(y).(z) = k
##                     }
##                 }
##                 z = z + 1
##             }
##             y = y + 1
##         }
##         x = x + 1
##     }
## }

def dist(x1, y1, z1, x2, y2, z2) {
    dx = x1 - x2
    dy = y1 - y2
    dz = z1 - z2
    return math:sqrt(dx*dx+dy*dy+dz*dz)
}

def update(t) {
    max = size - 1
    mid = size / 2
    quad = size / 4 - 1
    x = 1
    while x < max {
        y = 1
        while y < max {
            z = 1
            while z < max {
                if dist(x, y, z, mid, mid, mid) < t {
                    data.(x).(y).(z) = 7
                } else {
                    data.(x).(y).(z) = 0
                }
                z = z + 1
            }
            y = y + 1
        }
        x = x + 1
    }
}

def init() {
    x = 0
    while x < size {
        data.(x) = new size
        y = 0
        while y < size {
            data.(x).(y) = new size
            z = 0
            while z < size {
                data.(x).(y).(z) = 0
                z = z + 1
            }
            y = y + 1
        }
        x = x + 1
    }
}

def main() {
    init()
    
    cam = Camera3D()
    cam."position" = Vector3(0, 0, 0)
    cam."target" = Vector3(size/2, size/2, size/2)
    cam."up" = Vector3(0, 1, 0)
    cam."fovy" = 60
    cam."projection" = CameraProjection("CAMERA_PERSPECTIVE")


    data.(1).(1).(1) = 7
    data.(2).(2).(2) = 7

    t = 0
    while not WindowShouldClose() {
        t = t + GetFrameTime()

        cam."position"."x" = size * 9 / 8
        cam."position"."y" = size * 9 / 8
        cam."position"."z" = size * 9 / 8

        update(t)

        BeginDrawing()
        ClearBackground(Color(96, 96, 128, 255))
        BeginMode3D(cam)
        
        rlBegin(RL_TRIANGLES)
        
        x = 1
        while x < size {
            rlCheckRenderBatchLimit(size * size * 12);
            y = 1
            lyr = data.0
            while y < size {
                z = 1
                while z < size {
                    v = data.(x).(y).(z)
                    vx = data.(x-1).(y).(z)
                    vy = data.(x).(y-1).(z)
                    vz = data.(x).(y).(z-1)
                    if v != 0 {
                        if vx == 0 {
                            rlColor4ub(255, 0, 0, 255)
                            rlVertex3f(x, y,   z)
                            rlVertex3f(x, y,   z+1)
                            rlVertex3f(x, y+1, z)
                            rlVertex3f(x, y+1, z+1)
                            rlVertex3f(x, y+1, z)
                            rlVertex3f(x, y,   z+1)
                        }
                        if vy == 0 {
                            rlColor4ub(0, 255, 0, 255)
                            rlVertex3f(x,   y, z)
                            rlVertex3f(x+1, y, z)
                            rlVertex3f(x,   y, z+1)
                            rlVertex3f(x+1, y, z+1)
                            rlVertex3f(x,   y, z+1)
                            rlVertex3f(x+1, y, z)
                        }
                        if vz == 0 {
                            rlColor4ub(0, 0, 255, 255)
                            rlVertex3f(x,   y,   z)
                            rlVertex3f(x,   y+1, z)
                            rlVertex3f(x+1, y,   z)
                            rlVertex3f(x+1, y+1, z)
                            rlVertex3f(x+1, y,   z)
                            rlVertex3f(x,   y+1, z)
                        }
                    } else {
                        if vx != 0{
                            rlColor4ub(255, 0, 0, 255)
                            rlVertex3f(x, y,   z)
                            rlVertex3f(x, y+1, z)
                            rlVertex3f(x, y,   z+1)
                            rlVertex3f(x, y+1, z+1)
                            rlVertex3f(x, y,   z+1)
                            rlVertex3f(x, y+1, z)
                        }
                        if vy != 0 {
                            rlColor4ub(0, 255, 0, 255)
                            rlVertex3f(x,   y, z)
                            rlVertex3f(x,   y, z+1)
                            rlVertex3f(x+1, y, z)
                            rlVertex3f(x+1, y, z+1)
                            rlVertex3f(x+1, y, z)
                            rlVertex3f(x,   y, z+1)
                        }
                        if vz != 0 {
                            rlColor4ub(0, 0, 255, 255)
                            rlVertex3f(x,   y,   z)
                            rlVertex3f(x+1, y,   z)
                            rlVertex3f(x,   y+1, z)
                            rlVertex3f(x+1, y+1, z)
                            rlVertex3f(x,   y+1, z)
                            rlVertex3f(x+1, y,   z)
                        }
                    }
                    z = z + 1
                }
                y = y + 1
            }
            x = x + 1
        }

        rlEnd()
        EndMode3D()
        ## DrawFPS(10, 10)
        EndDrawing()
    }
}

SetTraceLogLevel(4)
InitWindow(screen_width, screen_height, "Hello World")
SetTargetFPS(120)
main()
CloseWindow()
