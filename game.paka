
require "raylib.paka"

screen_width = 1920
screen_height = 1080

size = 64

data = new size

## colors : 

colors = [
    [0   , 0   , 0  ],
    [255 , 0   , 0  ],
    [0   , 255 , 0  ],
    [255 , 255 , 0  ],
    [0   , 0   , 255],
    [255 , 0   , 255],
    [0   , 255 , 255],
    [255 , 255 , 255],
]

def update(t) {
    x = GetRandomValue(1, size - 2)
    z = GetRandomValue(1, size - 2)
    y = GetRandomValue(1, size - 2)
    if GetRandomValue(0, 2) < 1 {
        data.(x).(y).(z) = GetRandomValue(1, 7)
    } else {
        data.(x).(y).(z) = 0
    }
    ## max = size - 1
    ## x = 1
    ## while x < max {
    ##     y = 1
    ##     while y < max {
    ##         z = 1
    ##         while z < max {
    ##             xo = x - size / 2
    ##             yo = y - size / 2
    ##             zo = z - size / 2
    ##             v = math:sqrt(xo*xo+yo*yo+zo*zo)
    ##             if v < t {
    ##                 data.(x).(y).(z) = 5
    ##             } else {
    ##                 data.(x).(y).(z) = 0
    ##             }
    ##             z = z + 1
    ##         }
    ##         y = y + 1
    ##     }
    ##     x = x + 1
    ## }
}

def main() {
    cam = Camera3D()
    cam."position" = Vector3(0, 0, 0)
    cam."target" = Vector3(size/2, size/2, size/2)
    cam."up" = Vector3(0, 1, 0)
    cam."fovy" = 60
    cam."projection" = CameraProjection("CAMERA_PERSPECTIVE")

    x = 0
    while x < size {
        data.(x) = new size
        y = 0
        while y < size {
            data.(x).(y) = new size
            z = 0
            while z < size {
                data.(x).(y).(z) = 0
                z = z + 1
            }
            y = y + 1
        }
        x = x + 1
    }

    t = 0
    while 1 {
        t = t + GetFrameTime()
        update( math:sin(t) * size / 16 + size * 8 / 19 )
        BeginDrawing()
        ClearBackground(Color(96, 96, 128, 255))
        BeginMode3D(cam)
        cam."position"."x" = size
        cam."position"."y" = size
        cam."position"."z" = size
        
        rlBegin(RL_TRIANGLES)
        
        x = 1
        while x < size {
            rlCheckRenderBatchLimit(size * size * 12);
            y = 1
            lyr = data.0
            while y < size {
                z = 1
                while z < size {
                    v = data.(x).(y).(z)
                    vx = data.(x-1).(y).(z)
                    vy = data.(x).(y-1).(z)
                    vz = data.(x).(y).(z-1)
                    if v != 0 {
                        c = colors.(v) rlColor4ub(c.0, c.1, c.2, 255)
                        if vx == 0 {
                            rlColor4ub(255, 0, 0, 255)
                            rlVertex3f(x, y,   z)
                            rlVertex3f(x, y,   z+1)
                            rlVertex3f(x, y+1, z)
                            rlVertex3f(x, y+1, z+1)
                            rlVertex3f(x, y+1, z)
                            rlVertex3f(x, y,   z+1)
                        }
                        if vy == 0 {
                            rlColor4ub(0, 255, 0, 255)
                            rlVertex3f(x,   y, z)
                            rlVertex3f(x+1, y, z)
                            rlVertex3f(x,   y, z+1)
                            rlVertex3f(x+1, y, z+1)
                            rlVertex3f(x,   y, z+1)
                            rlVertex3f(x+1, y, z)
                        }
                        if vz == 0 {
                            rlColor4ub(0, 0, 255, 255)
                            rlVertex3f(x,   y,   z)
                            rlVertex3f(x,   y+1, z)
                            rlVertex3f(x+1, y,   z)
                            rlVertex3f(x+1, y+1, z)
                            rlVertex3f(x+1, y,   z)
                            rlVertex3f(x,   y+1, z)
                        }
                    } else {
                        if vx != 0{
                            c = colors.(vx) rlColor4ub(c.0, c.1, c.2, 255)
                            rlColor4ub(255, 0, 0, 255)
                            rlVertex3f(x, y,   z)
                            rlVertex3f(x, y+1, z)
                            rlVertex3f(x, y,   z+1)
                            rlVertex3f(x, y+1, z+1)
                            rlVertex3f(x, y,   z+1)
                            rlVertex3f(x, y+1, z)
                        }
                        if vy != 0 {
                            c = colors.(vy) rlColor4ub(c.0, c.1, c.2, 255)
                            rlColor4ub(0, 255, 0, 255)
                            rlVertex3f(x,   y, z)
                            rlVertex3f(x,   y, z+1)
                            rlVertex3f(x+1, y, z)
                            rlVertex3f(x+1, y, z+1)
                            rlVertex3f(x+1, y, z)
                            rlVertex3f(x,   y, z+1)
                        }
                        if vz != 0 {
                            c = colors.(vz) rlColor4ub(c.0, c.1, c.2, 255)
                            rlColor4ub(0, 0, 255, 255)

                            rlVertex3f(x,   y,   z)
                            rlVertex3f(x+1, y,   z)
                            rlVertex3f(x,   y+1, z)
                            rlVertex3f(x+1, y+1, z)
                            rlVertex3f(x,   y+1, z)
                            rlVertex3f(x+1, y,   z)
                        }
                    }
                    z = z + 1
                }
                y = y + 1
            }
            x = x + 1
        }

        rlEnd()
        EndMode3D()
        DrawFPS(10, 10)
        EndDrawing()
    }
}

SetTraceLogLevel(TraceLogLevel("LOG_WARNING"))
InitWindow(screen_width, screen_height, "vmine")
SetTargetFPS(120)
main()
CloseWindow()
